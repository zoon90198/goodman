extends layout
block content
<<<<<<< HEAD
 head
    meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
    meta(charset='utf-8')
    style.
      html, body {
      height: 100%;
      margin: 0;
      margin-top:5px;
      margin-right:20%;
      margin-left:20%;
      margin-bottom:20%;
      padding: 0;
      }
      #map {
      height: 100%;
      }
      .controls {
      margin-top: 10px;
      border: 1px solid transparent;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      height: 32px;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }
      #pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 300px;
      }
      #pac-input:focus {
      border-color: #4d90fe;
      }
      .pac-container {
      font-family: Roboto;
      }
      #type-selector {
      color: #fff;
      background-color: #4d90fe;
      padding: 5px 11px 0px 11px;
      }
      #type-selector label {
      font-family: Roboto;
      font-size: 13px;
      font-weight: 300;
      }
    title Places Searchbox
    style.
      #target {
      width: 345px;
      }
  body
    input#pac-input.controls(type='text', placeholder='Search Box')
    #map
    script.
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.
      function initAutocomplete() {
      var map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 25.0132497, lng: 121.54111869999997},
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP
      });
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
      });
      var markers = [];
      // [START region_getplaces]
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) {
      return;
      }
      // Clear out the old markers.
      markers.forEach(function(marker) {
      marker.setMap(null);
      });
      markers = [];
      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
      var icon = {
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(25, 25)
      };
      // Create a marker for each place.
      markers.push(new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
      }));
      if (place.geometry.viewport) {
      // Only geocodes have viewport.
      bounds.union(place.geometry.viewport);
      } else {
      bounds.extend(place.geometry.location);
      }
      });
      map.fitBounds(bounds);
      });
      // [END region_getplaces]
      }
    script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDbftKJuVwrjuf6Uehp5DyBLqY5PuSFvlc&libraries=places&callback=initAutocomplete', async='', defer='')
=======
 ul.wrap
  head
    meta(charset='UTF-8')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css')
    script(src='https://code.jquery.com/jquery-2.2.4.min.js')
    script(src='https://cdn.essoduke.org/js/tinyMap/jquery.tinyMap-3.4.5.min.js')
    style.
      #demo {
      width: 600px;
      height: 600px;
      }
  body
    #demo
    script.
      var demo = $('#demo');
      function getLocation() {
      if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(showPosition);
      } else {
      demo.text("Geolocation is not supported by this browser.");
      }
      }
      function showPosition(position) {
      console.log(position);
      demo.tinyMap({
      'center': [position.coords.latitude, position.coords.longitude],
      'zoom': 12,
      'marker': [
      {
      'addr': [position.coords.latitude, position.coords.longitude],
      'text': '<strong>地址</strong>',
      'newLabel': '您的位置',
      'newLabelCSS': 'labels',
      // 自訂外部圖示
            'icon': {
                'url': '/images/big.png',
                'scaledSize': [48, 48]
            },
            // 動畫效果
            'animation': 'DROP'
      },
      {'addr': ['25.041282077030896', '121.56741142272949']},
      {'addr': ['25.0383270525352', '121.57045841217041'], 'text': '<strong>110台灣台北市信義區松高路68號</strong>'},
      {'addr': ['25.034516521123315','121.56496524810791'], 'text': '<strong>110台灣台北市信義區台北101</strong>'},
      {'addr': ['25.037627167884715', '121.56732559204102'], 'text': '<strong>110台灣台北市信義區松壽路20巷</strong>'},
      {'addr': ['25.039726809855434', '121.55633926391602'], 'text': '<strong>106台灣台北市大安區光復南路280巷25號</strong>'},
      {'addr': ['25.037160575899154', '121.55350685119629'], 'text': '<strong>106台灣台北市大安區仁愛路四段300巷11號</strong>'},
      {'addr': ['25.035877438787317', '121.55715465545654'], 'text': '<strong>106台灣台北市大安區光復南路440-1號</strong>'}            ]
      });
      }
      getLocation();

  

    
>>>>>>> user_login
